'=== [ExportDate] 2025-05-15 ===
'=== [File] xl_mod_ChartUtilities.bas ===
'-------------------------------------
' Module: xl_mod_ChartUtilities
' 説明  : グラフ作成・更新ユーティリティ
' 作成日: 2025/05/04
' 更新日: -
'-------------------------------------
Option Explicit

'=================================================
' サブルーチン名 : CreateChart
' 説明   : 新規グラフを作成
'=================================================
Public Sub CreateChart(ws As Worksheet, chartType As XlChartType, srcRange As Range, left As Double, top As Double, width As Double, height As Double)
    Dim chtObj As ChartObject
    Set chtObj = ws.ChartObjects.Add(left, top, width, height)
    chtObj.Chart.SetSourceData Source:=srcRange
    chtObj.Chart.ChartType = chartType
End Sub

'=================================================
' サブルーチン名 : UpdateChartSeries
' 説明   : 既存グラフの系列データを更新
'=================================================
Public Sub UpdateChartSeries(cht As Chart, seriesIndex As Long, newRange As Range)
    cht.SeriesCollection(seriesIndex).Values = newRange
End Sub


'=== [File] xl_mod_ConditionalFormattingUtilities.bas ===
'-------------------------------------
' Module: xl_mod_ConditionalFormattingUtilities
' 説明  : 条件付き書式設定の汎用関数
' 作成日: 2025/05/04
' 更新日: -
'-------------------------------------
Option Explicit

'=================================================
' サブルーチン名 : AddColorScaleCF
' 説明   : 3色スケールの条件付き書式を追加
'=================================================
Public Sub AddColorScaleCF(rng As Range)
    rng.FormatConditions.AddColorScale ColorScaleType:=3
End Sub

'=================================================
' サブルーチン名 : ClearCF
' 説明   : 条件付き書式をクリア
'=================================================
Public Sub ClearCF(rng As Range)
    rng.FormatConditions.Delete
End Sub

'=================================================
' 関数名 : ListCF
' 説明   : 条件付き書式の種類を一覧で取得
'=================================================
Public Function ListCF(rng As Range) As Variant
    Dim i As Long
    Dim arr() As String
    ReDim arr(1 To rng.FormatConditions.Count)
    For i = 1 To rng.FormatConditions.Count
        arr(i) = rng.FormatConditions(i).Type
    Next i
    ListCF = arr
End Function


'=== [File] xl_mod_NameUtilities.bas ===
Attribute VB_Name = "xl_mod_NameUtilities"
'簡易テスト済み
'-------------------------------------
' Module: xl_mod_NameUtilities
' 説明  : 名前定義に関するユーティリティ処理（整形・検証・確認・削除）
' 作成日: 2025/05/15
' 更新日: -
'-------------------------------------
Option Explicit
'=================================================
' 関数名 : SanitizeNameString
' 引数   : originalName（String）- 元の名前
' 戻り値 : 使用禁止文字を "_" に置換した文字列
' 機能   : 名前定義に適した文字列に変換するにゃ
'=================================================
Public Function SanitizeNameString(originalName As String) As String
    Dim pattern As String
    pattern = "[^A-Za-z0-9_\.]" ' ← アルファベット・数字・_・. 以外を除外
    Dim regEx As Object
    Set regEx = CreateObject("VBScript.RegExp")
    regEx.pattern = pattern
    regEx.Global = True
    SanitizeNameString = regEx.Replace(originalName, "_")
End Function

'=================================================
' 関数名 : IsValidName
' 引数   : nameStr（String）- 検証対象の名前
' 戻り値 : True（有効）/False（無効）
' 機能   : Excelの名前定義として有効かどうかを検証するにゃ
'=================================================
Public Function IsValidName(nameStr As String) As Boolean
    On Error GoTo ErrHandler
    ThisWorkbook.names.Add nameStr, "=1"
    ThisWorkbook.names(nameStr).Delete
    IsValidName = True
    Exit Function
ErrHandler:
    IsValidName = False
End Function

'=================================================
' 関数名 : NameExists
' 引数   : nameStr（String）- チェックする名前
' 戻り値 : True（存在する）/False（存在しない）
' 機能   : ブック内に既に存在する名前かどうかを判定するにゃ
'=================================================
Public Function NameExists(nameStr As String) As Boolean
    Dim nm As Name
    For Each nm In ThisWorkbook.names
        ' スコープに関係なく定義名だけを取り出す
        If nm.Name Like "*" Then
            If Right(nm.Name, Len(nameStr)) = nameStr Then
                NameExists = True
                Exit Function
            End If
        End If
    Next nm
    NameExists = False
End Function

'=================================================
' サブルーチン名 : DeleteName
' 引数   : nameStr（String）- 削除する名前
' 機能   : 指定された名前定義を削除するにゃ（存在しない場合は無視）
'=================================================
Public Sub DeleteName(nameStr As String)
    On Error Resume Next
    ThisWorkbook.names(nameStr).Delete
    On Error GoTo 0
End Sub



'=== [File] xl_mod_PivotUtilities.bas ===
'-------------------------------------
' Module: xl_mod_PivotUtilities
' 説明  : ピボットテーブル操作ユーティリティ
' 作成日: 2025/05/04
' 更新日: -
'-------------------------------------
Option Explicit

'=================================================
' サブルーチン名 : CreatePivotTable
' 説明   : ピボットテーブルを作成
'=================================================
Public Sub CreatePivotTable(ws As Worksheet, srcRange As Range, destCell As Range, pivotName As String)
    Dim pvtCache As PivotCache
    Set pvtCache = ThisWorkbook.PivotCaches.Create(xlDatabase, srcRange)
    pvtCache.CreatePivotTable TableDestination:=destCell.Address, TableName:=pivotName
End Sub

'=================================================
' サブルーチン名 : RefreshPivotTable
' 説明   : ピボットテーブルを更新
'=================================================
Public Sub RefreshPivotTable(pivotTable As PivotTable)
    pivotTable.RefreshTable
End Sub


'=== [File] xl_mod_RangeUtilities.bas ===
'-------------------------------------
' Module: xl_mod_RangeUtilities
' 説明  : Range／セル操作の拡張関数
' 作成日: 2025/05/04
' 更新日: -
'-------------------------------------
Option Explicit

'=================================================
' サブルーチン名 : FindAndReplace
' 説明   : 範囲内で検索と置換
'=================================================
Public Sub FindAndReplace(rng As Range, findText As String, replaceText As String)
    rng.Replace what:=findText, Replacement:=replaceText, LookAt:=xlPart
End Sub

'=================================================
' サブルーチン名 : ClearRange
' 説明   : 範囲をクリア
'=================================================
Public Sub ClearRange(rng As Range)
    rng.Clear
End Sub

'=================================================
' サブルーチン名 : AutoFitColumns
' 説明   : 列幅を自動調整
'=================================================
Public Sub AutoFitColumns(rng As Range)
    rng.EntireColumn.AutoFit
End Sub


'=== [File] xl_mod_WorksheetUtilities.bas ===
'-------------------------------------
' Module: xl_mod_WorksheetUtilities
' 説明  : ワークシート操作の汎用ユーティリティ
' 作成日: 2025/05/04
' 更新日: -
'-------------------------------------
Option Explicit

'=================================================
' サブルーチン名 : AddSheet
' 説明   : 新しいワークシートを追加し名前を設定
'=================================================
Public Sub AddSheet(wb As Workbook, sheetName As String)
    wb.Worksheets.Add After:=wb.Sheets(wb.Sheets.Count)
    wb.ActiveSheet.Name = sheetName
End Sub

'=================================================
' サブルーチン名 : DeleteSheet
' 説明   : ワークシートを削除
'=================================================
Public Sub DeleteSheet(wb As Workbook, sheetName As String)
    Application.DisplayAlerts = False
    On Error Resume Next
    wb.Worksheets(sheetName).Delete
    On Error GoTo 0
    Application.DisplayAlerts = True
End Sub

'=================================================
' サブルーチン名 : RenameSheet
' 説明   : ワークシート名を変更
'=================================================
Public Sub RenameSheet(wb As Workbook, oldName As String, newName As String)
    wb.Worksheets(oldName).Name = newName
End Sub


