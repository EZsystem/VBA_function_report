【VBA統合ルールブック：命名・構造・コメント様式】
作成日：2025年5月
作成者：小田島家の猫・そうじろう（そうちゃん）

──────────────────────────────
■ 1. 概要
このルールブックは、VBAの開発における命名規則・コメント記述・コード構造の一貫性を保つために統一された指針です。標準モジュール・クラスモジュール・フォームモジュールすべてに適用します。

──────────────────────────────
■ 2. 命名ルール（Naming Convention）

● 2-1. アプリケーション種別プレフィックス

* acc\_：Access用
* xl\_ ：Excel用
* com\_：共通ユーティリティ用

例：acc\_clsExcelImporter、xl\_modWorkbookManager

● 2-2. モジュール種別プレフィックス

* cls：クラスモジュール
* mod：標準モジュール
* frm：フォームモジュール

● 2-3. モジュール名構成
形式：mod\_【対象】【目的】\_【処理フェーズ】
例：mod\_IcubeImport\_Commit

● 2-4. プロシージャ名の命名規則
形式：【目的】\_【動作内容】\[\_対象]
例：Import\_LoadFromExcel, Export\_WriteToCsv

● 2-5. 命名スタイル（要素別）

| 要素       | スタイル例               | 備考           |
| -------- | ------------------- | ------------ |
| 変数       | itemCount（camel）    | 意味ある英語       |
| プロパティ    | StartDate（Pascal）   | 外部公開         |
| プライベート変数 | pItemCount（p+camel） | 内部用          |
| 引数       | rowIndex（camel）     | 短く簡潔に意味を明確に  |
| 関数/Sub名  | LoadData（動詞+目的）     | 何をするかがわかるように |

● 2-6. 命名禁止ワード

| NG例      | 理由             |
| -------- | -------------- |
| Test1    | 意味不明・汎用的で曖昧    |
| Tmp, Run | 誤用の可能性が高い      |
| 日本語      | 国際化・統一性を損ねる    |
| 接頭辞なし    | モジュール種別が不明瞭になる |

──────────────────────────────
■ 3. コメント・ドキュメント記述ルール

● 3-1. モジュール冒頭
形式：
'-------------------------------------
' Module: mod\_モジュール名
' 説明　：○○処理の共通関数群
' 作成日：2025/04/25
' 更新日：-
'-------------------------------------
※ クラスモジュール: 'Class Module: cls\_モジュール名
※ フォームモジュール: 'Form Module: frm\_フォーム名

● 3-2. Option宣言
Option Compare Database
Option Explicit

● 3-3. 変数宣言ブロック
' --- 外部公開用プロパティ ---
Public Property Get Something() As Type

' --- 内部保持変数 ---
Private pSomething As Type

● 3-4. プロシージャコメント
'============================================
 プロシージャ名         : Function GetColIndex
 概要                   : 列名から列番号を取得する
 引数                   : colName As String - 列名（例："A"）
 戻り値（Functionのみ） : 列番号（Long）
 呼び出し元フォーム／イベント : 未特定
 関連情報               : Excelの列名 → 列番号への変換用に使用
 備考                   : 例: "C" を渡すと 3 を返す
'============================================


● 3-5. コメント文体ルール

| 項目   | ルール                | 例                 |
| ---- | ------------------ | ----------------- |
| 言語   | 日本語で統一             | 英語コメントを避ける        |
| 語尾   | 「です・ます」調を使わない（常体）  | ○「値を取得する」         |
| 終わり方 | 句点（。）を付けない         | ×「〜します。」→ ○「〜する」  |
| 区切り  | コロン（:）＋全角スペースで整える  | 「引数 : 値（Integer）」 |
| 改行   | 長文を避け、1〜2行で簡潔に記述する | 必要なら改行で補足する       |

● 3-6. コメント強調例
' ※注意：この処理は初期化前に呼び出してはいけない
' ！警告：Nullが渡されるとエラーになる可能性あり

● 3-7. セクションコメント
' ----------------------------
' Import処理群
' ----------------------------

──────────────────────────────
■ 4. コード構造・スタイルルール

● 4-1. 処理ブロックの順序
初期化 → 検証 → 実行 → 出力

● 4-2. 処理ブロックの構造

* Public Sub または Public Function を基本とする
* Private / Friend も必要に応じて使用
* 各処理ブロックの先頭にコメントを記載

● 4-3. 関数・Subの終了ルール（推奨）
関数やSubの終了行にコメントをつけると見失いにくい：
End Function   ' ← 関数の終わり
End Sub        ' ← Subの終わり

● 4-4. 処理内のサブ区切り（Optional）
' --- 1. 初期化 ---
' --- 2. 条件判定 ---
' --- 3. 実行処理 ---
' --- 4. 結果の出力 ---

● 4-5. インデント・改行

| 項目       | 内容             |
| -------- | -------------- |
| インデント    | 半角スペース4個が基本    |
| ネスト（入れ子） | ネストごとに4スペース追加  |
| コメントの前後  | 1行空けると読みやすくなる  |
| 折返し      | \_（アンダースコア）で改行 |

──────────────────────────────
■ 5. 補足スタイルと推奨事項

* セクション装飾は統一（'==== や '----）
* 200行以上のモジュールは分割を検討
* 英語命名は動詞＋名詞構造で統一
* コレクションは複数形（例：users, errors）
* ブール型は Is, Has, Can で始める（例：IsValid, HasValue）

──────────────────────────────
（完）
